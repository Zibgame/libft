ğŸŸ© Les plus simples :

putendl_fd â†’ comme putstr_fd mais ajoute '\n' Ã  la fin.

putnbr_fd â†’ un peu plus logique : il faut gÃ©rer les entiers (rÃ©cursivitÃ© ou division/modulo) et le signe nÃ©gatif.

ğŸŸ¨ DifficultÃ© moyenne :

calloc â†’ allocation + initialisation Ã  0 (attention au overflow de nmemb * size).

substr â†’ allouer une sous-chaÃ®ne Ã  partir dâ€™une position donnÃ©e. GÃ©rer les cas limites (start > longueur, len trop long).

striteri â†’ appliquer une fonction Ã  chaque caractÃ¨re par rÃ©fÃ©rence. Assez simple mais demande rigueur dans les pointeurs.

strmapi â†’ comme striteri, mais retourne une nouvelle chaÃ®ne avec les caractÃ¨res modifiÃ©s. Gestion mÃ©moire Ã  prÃ©voir.

ğŸŸ¥ Les plus avancÃ©es :

itoa â†’ convertir un int en char *. Doit gÃ©rer les nombres nÃ©gatifs, INT_MIN, et allouer la bonne taille.

strtrim â†’ retirer les caractÃ¨res dâ€™un set au dÃ©but et Ã  la fin dâ€™une chaÃ®ne. Gestion fine des indices et des cas vides.

strnstr â†’ recherche dâ€™une sous-chaÃ®ne dans une autre avec une limite (len). TrÃ¨s piÃ©geuse Ã  cause des bornes et conditions dâ€™arrÃªt.
